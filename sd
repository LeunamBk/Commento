var express = require('express');
var fs = require('fs');
var request = require('request');
var cheerio = require('cheerio');
var wait = require("wait.for");
var app     = express();


Articles = {

    baseUrl : "",
    articleTag : "",
    articles : [],

    getArtickles : function(){
        var html = wait.for(this.requestWaitForWrapper, this.getBaseUrl() + '&s=' + s.toString());
        var $ = cheerio.load(html);

        // We'll use the unique header class as a starting point.
        $(this.getArticleTag).each(function () {
            var article = {title: "", release: "", link: "", forum: ""};

            // Let's store the data we filter into a variable so we can easily see what's going on.
            var data = $(this);

            // In examining the DOM we notice that the title rests within the first child element of the header tag.
            // Utilizing jQuery we can easily navigate and get the text by writing the following code:
            var title = data.children().first().text();
            var link = data.children().first().attr('href');

            // Once we have our title, we'll store it to the our json object.
            article.title = title;
            article.link = this.getBaseUrl + link;
            this.articles.push(article);
        })

    },

    getBaseUrl : function(){ return this.baseUrl; },
    setBaseUrl : function(url){
        this.baseUrl = url;
    },

    getArticleTag : function(){ return this.articleTag; },
    setArticleTag : function(tag){
        this.articleTag = tag;
    },

    requestWaitForWrapper : function(url, callback) {
        request(url, function(error, response, html) {
            if (error)
                callback(error, response);
            else if (response.statusCode == 200)
                callback(null, html);
            else
                callback(new Error("Status not 200 OK"), response);
        });
    }
};

Forums = {

    articleUrls : "",
    forumTag : "",
    pageCountTag : "",

    getForums : function(){
        for(var i = 0; i < this.articleUrls.length; i++) {
            var html = wait.for(this.requestWaitForWrapper, this.getArticleUrl()[i] + '&s=' + s.toString());
            var $ = cheerio.load(html);

            var forum = {num: "", sumPages: "", link: ""};

            // We'll use the unique header class as a starting point.
            $(this.getForumTag).filter(function () {

                // Let's store the data we filter into a variable so we can easily see what's going on.
                var data = $(this);

                // In examining the DOM we notice that the title rests within the first child element of the header tag.
                // Utilizing jQuery we can easily navigate and get the text by writing the following code:
                var link = data.children().first().attr('href');
            });

            // We'll use the unique header class as a starting point.
            $(this.getPageCountTag).filter(function () {

                // Let's store the data we filter into a variable so we can easily see what's going on.
                var data = $(this);

                // In examining the DOM we notice that the title rests within the first child element of the header tag.
                // Utilizing jQuery we can easily navigate and get the text by writing the following code:
                var pageCount = data.text();
                // TODO: regex the last big digit out
            })
        }
    },

    getArticleUrl : function(){ return this.articleUrl; },
    setArticleUrl : function(url){
        this.articleUrl = url;
    },

    getForumTag : function(){ return this.forumTag; },
    setForumTag : function(tag){
        this.forumTag = tag;
    },

    getPageCountTag : function(){ return this.pageCountTag; },
    setPageCountTag : function(tag){
        this.pageCountTag = tag;
    },

    requestWaitForWrapper : function(url, callback) {
        request(url, function(error, response, html) {
            if (error)
                callback(error, response);
            else if (response.statusCode == 200)
                callback(null, html);
            else
                callback(new Error("Status not 200 OK"), response);
        });
    }

};


spiegel forumTag = ".module-title"
spiegel Page Count Tag = ".js-article-comments-box-page-count"


app.get('/scrape', function(req, res) {


    // The URL we will scrape from - in our example Anchorman 2.
    var spiegel = new Articles();
    spiegel.baseUrl = 'http://www.spiegel.de/';
    spiegel.articleTag = '.article-title';

    url = 'http://www.spiegel.de/';
















    // The structure of our request call
    // The first parameter is our URL
    // The callback function takes 3 parameters, an error, response status code and the html

    request(url, function (error, response, html) {

        // First we'll check to make sure no errors occurred when making the request

        if (!error) {
            // Next, we'll utilize the cheerio library on the returned html which will essentially give us jQuery functionality

            var $ = cheerio.load(html);

            // Finally, we'll define the variables we're going to capture

            var articles = {};
            // We'll use the unique header class as a starting point.

            $('.article-title').each(function (i, e) {
                var article = {title: "", release: "", link: "", forum: ""};

                // Let's store the data we filter into a variable so we can easily see what's going on.
                var data = $(this);

                // In examining the DOM we notice that the title rests within the first child element of the header tag.
                // Utilizing jQuery we can easily navigate and get the text by writing the following code:
                var title = data.children().first().text();
                var link = data.children().first().attr('href');

                // Once we have our title, we'll store it to the our json object.

                article.title = title;
                article.link = "www.spiegel.de" + link;
                articles[i]=(article);
            })
            /*
             $('.star-box-giga-star').filter(function(){
             var data = $(this);

             // The .star-box-giga-star class was exactly where we wanted it to be.
             // To get the rating, we can simply just get the .text(), no need to traverse the DOM any further

             rating = data.text();

             json.rating = rating;
             })
             */
            getComments(articles)
        }

        // To write to the system we will use the built in 'fs' library.
        // In this example we will pass 3 parameters to the writeFile function
        // Parameter 1 :  output.json - this is what the created filename will be called
        // Parameter 2 :  JSON.stringify(json, null, 4) - the data to write, here we do an extra step by calling JSON.stringify to make our JSON easier to read
        // Parameter 3 :  callback function - a callback function to let us know the status of our function

        //   fs.writeFile('output.json', JSON.stringify(articles, null, 4), function(err){

        //      console.log('File successfully written! - Check your project directory for the output.json file');

        //  })

        // Finally, we'll just send out a message to the browser reminding you that this app does not have a UI.
        res.send('Check your console!')

    });
    function getComments(articles) {
       for(var i= 0; i < articles.length; i++){
            url = articles[i].link
            console.log(i)
            request(url, function (error, response, html) {

                // First we'll check to make sure no errors occurred when making the request

                if (!error) {
                    // Next, we'll utilize the cheerio library on the returned html which will essentially give us jQuery functionality

                    var $ = cheerio.load(html);

                    // Finally, we'll define the variables we're going to capture

                    var doo = [];
                    // We'll use the unique header class as a starting point.

                    $('.article-comment-title').each(function (i, e) {
                        var article = {title: "", release: "", link: "", forum: ""};

                        // Let's store the data we filter into a variable so we can easily see what's going on.
                        var data = $(this);

                        // In examining the DOM we notice that the title rests within the first child element of the header tag.
                        // Utilizing jQuery we can easily navigate and get the text by writing the following code:
                        var title = data.children().first().text();
                        //var link = data.children().first().attr('href');

                        // Once we have our title, we'll store it to the our json object.

                        article.title = title;
                        // article.link = link;
                        doo.push(article);
                    })
                    /*
                     $('.star-box-giga-star').filter(function(){
                     var data = $(this);

                     // The .star-box-giga-star class was exactly where we wanted it to be.
                     // To get the rating, we can simply just get the .text(), no need to traverse the DOM any further

                     rating = data.text();

                     json.rating = rating;
                     })
                     */
                }
                // To write to the system we will use the built in 'fs' library.
                // In this example we will pass 3 parameters to the writeFile function
                // Parameter 1 :  output.json - this is what the created filename will be called
                // Parameter 2 :  JSON.stringify(json, null, 4) - the data to write, here we do an extra step by calling JSON.stringify to make our JSON easier to read
                // Parameter 3 :  callback function - a callback function to let us know the status of our function

                fs.writeFile('output.json', JSON.stringify(doo, null, 4), function (err) {

                    console.log('File successfully written! - Check your project directory for the output.json file');

                })

                // Finally, we'll just send out a message to the browser reminding you that this app does not have a UI.
                res.send('Check your console!')

            });
        }
    }
})

app.listen('8081')

console.log('Magic happens on port 8081');

exports = module.exports = app;
